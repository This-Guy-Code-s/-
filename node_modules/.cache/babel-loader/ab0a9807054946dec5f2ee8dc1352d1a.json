{"ast":null,"code":"import axios from 'axios';\nexport const MOVING = 'MOVING';\nexport const MOVED = 'MOVED';\nexport const BTN = 'BTN';\nexport const BTNN = 'BTNN';\nexport const ERR = 'ERR';\nexport const DARK = \"DARK\";\nexport const LIGHT = \"LIGHT\";\nexport const getMyWork = () => dispatch => {\n  //get my work that ill be displaying on my page\n  dispatch({\n    type: MOVING\n  });\n  axios.get(process.env.REACT_APP_mywork).then(res => {\n    dispatch({\n      type: MOVED,\n      payload: res.data.work\n    });\n  }).catch(err => {\n    dispatch({\n      type: ERR,\n      payload: err\n    });\n  });\n};\nexport const changeBtnLabel = label => dispatch => {\n  return dispatch({\n    type: BTN,\n    payload: label\n  });\n};\nexport const changeBtnLabel_ = label => dispatch => {\n  return dispatch({\n    type: BTNN,\n    payload: label\n  });\n};\nexport const DarkMode = mode => dispatch => {\n  console.log(mode);\n  mode = !mode;\n  console.log(mode);\n  setTimeout(() => {\n    if (mode) {\n      console.log('true', mode);\n      dispatch({\n        type: DARK,\n        payload: mode\n      });\n    } else {\n      console.log('false', mode);\n      dispatch({\n        type: LIGHT,\n        payload: mode\n      });\n    }\n  }, 0);\n};","map":{"version":3,"sources":["/home/tgc/Desktop/newSite/-/src/redux/actions.js"],"names":["axios","MOVING","MOVED","BTN","BTNN","ERR","DARK","LIGHT","getMyWork","dispatch","type","get","process","env","REACT_APP_mywork","then","res","payload","data","work","catch","err","changeBtnLabel","label","changeBtnLabel_","DarkMode","mode","console","log","setTimeout"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAMC,MAAM,GAAG,QAAf;AACP,OAAO,MAAMC,KAAK,GAAG,OAAd;AACP,OAAO,MAAMC,GAAG,GAAG,KAAZ;AACP,OAAO,MAAMC,IAAI,GAAG,MAAb;AACP,OAAO,MAAMC,GAAG,GAAG,KAAZ;AACP,OAAO,MAAMC,IAAI,GAAG,MAAb;AACP,OAAO,MAAMC,KAAK,GAAG,OAAd;AAGP,OAAO,MAAMC,SAAS,GAAG,MAAMC,QAAQ,IAAI;AAC3C;AACCA,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAACT;AAAN,GAAD,CAAR;AACAD,EAAAA,KAAK,CAACW,GAAN,CAAUC,OAAO,CAACC,GAAR,CAAYC,gBAAtB,EACCC,IADD,CACMC,GAAG,IAAE;AACXP,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAACR,KAAN;AAAYe,MAAAA,OAAO,EAACD,GAAG,CAACE,IAAJ,CAASC;AAA7B,KAAD,CAAR;AAEC,GAJD,EAKCC,KALD,CAKOC,GAAG,IAAE;AACXZ,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAACL,GAAN;AAAUY,MAAAA,OAAO,EAACI;AAAlB,KAAD,CAAR;AAEA,GARD;AASA,CAZM;AAgBP,OAAO,MAAMC,cAAc,GAAGC,KAAK,IAAId,QAAQ,IAAG;AAE/C,SAAOA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAACP,GAAN;AAAUc,IAAAA,OAAO,EAACM;AAAlB,GAAD,CAAf;AACF,CAHM;AAOP,OAAO,MAAMC,eAAe,GAAGD,KAAK,IAAId,QAAQ,IAAG;AAEhD,SAAOA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAACN,IAAN;AAAWa,IAAAA,OAAO,EAACM;AAAnB,GAAD,CAAf;AACF,CAHM;AAOP,OAAO,MAAME,QAAQ,GAAIC,IAAD,IAAUjB,QAAQ,IAAG;AAC5CkB,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACCA,EAAAA,IAAI,GAAG,CAACA,IAAR;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAG,EAAAA,UAAU,CAAC,MAAI;AACb,QAAGH,IAAH,EAAQ;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBF,IAAnB;AACGjB,MAAAA,QAAQ,CAAC;AAACC,QAAAA,IAAI,EAACJ,IAAN;AAAWW,QAAAA,OAAO,EAACS;AAAnB,OAAD,CAAR;AAEK,KAJN,MAIU;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBF,IAApB;AACGjB,MAAAA,QAAQ,CAAC;AAACC,QAAAA,IAAI,EAACH,KAAN;AAAYU,QAAAA,OAAO,EAACS;AAApB,OAAD,CAAR;AACH;AACC,GATS,EASR,CATQ,CAAV;AAWQ,CAfF","sourcesContent":["import axios from 'axios'\nexport const MOVING = 'MOVING'\nexport const MOVED = 'MOVED'\nexport const BTN = 'BTN'\nexport const BTNN = 'BTNN'\nexport const ERR = 'ERR'\nexport const DARK = \"DARK\"\nexport const LIGHT = \"LIGHT\"\n\n\nexport const getMyWork = () => dispatch => {\n//get my work that ill be displaying on my page\n\tdispatch({type:MOVING})\n\taxios.get(process.env.REACT_APP_mywork)\n\t.then(res=>{\n\tdispatch({type:MOVED,payload:res.data.work})\n\n\t})\n\t.catch(err=>{\n\t\tdispatch({type:ERR,payload:err})\n\n\t})\n}\n\n\n\nexport const changeBtnLabel = label => dispatch =>{\n\n\t\t\treturn dispatch({type:BTN,payload:label})\n}\n\n\n\nexport const changeBtnLabel_ = label => dispatch =>{\n\n\t\t\treturn dispatch({type:BTNN,payload:label})\n}\n\n\n\nexport const DarkMode = (mode) => dispatch =>{\n\tconsole.log(mode)\n\t\tmode = !mode\n\tconsole.log(mode)\n\tsetTimeout(()=>{\n\t\t if(mode){\n\tconsole.log('true',mode)\n \t\t\tdispatch({type:DARK,payload:mode})\n          \n        }else{ \n\tconsole.log('false',mode)\n \t\t\tdispatch({type:LIGHT,payload:mode})\n}  \n\t},0)\n\n        }\n"]},"metadata":{},"sourceType":"module"}