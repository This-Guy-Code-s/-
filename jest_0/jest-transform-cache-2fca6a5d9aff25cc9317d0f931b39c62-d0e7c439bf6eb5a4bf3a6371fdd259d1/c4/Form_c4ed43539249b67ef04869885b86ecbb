c0269ea6455310da3a9e41ae781d79cb
"use strict";

var _interopRequireDefault = require("/home/tgc/Desktop/newSite/-/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _axios = _interopRequireDefault(require("axios"));

var _contactStyles = require("../../util/contactStyles");

var _reactstrap = require("reactstrap");

var _contactValidations = require("../../util/contactValidations");

var _jsxFileName = "/home/tgc/Desktop/newSite/-/src/comps/home/Form.js";
const labe = {
  WebkitTextFillColor: '#fff',
  fontWeight: 'bolder'
};

class Form_ extends _react.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      valOrNah1: '',
      valOrNah2: '',
      valOrNah3: '',
      msg: {
        name: '',
        email: '',
        message: ''
      },
      errMsg: '',
      passMsg: ''
    };
    this.send = this.send.bind(this);
  }

  send(e) {
    e.preventDefault();
    !(0, _contactValidations.name_)(this.state.msg.name) ? this.setState({
      //check name
      errMsg: "We Cant Send This, please check for errors",
      valOrNah1: "is-invalid",
      passMsg: ""
    }) : this.setState({
      valOrNah1: "is-valid"
    });
    !(0, _contactValidations.email_)(this.state.msg.email) ? this.setState({
      //check email
      errMsg: "We Cant Send This, please check for errors",
      valOrNah2: "is-invalid",
      passMsg: ""
    }) : this.setState({
      valOrNah2: "is-valid"
    });
    !(0, _contactValidations.msg_)(this.state.msg.message) ? this.setState({
      //check msg
      errMsg: "We Cant Send This, please check for errors",
      valOrNah3: "is-invalid",
      passMsg: ""
    }) : this.setState({
      valOrNah3: "is-valid"
    });
    setTimeout(() => {
      //take a sec to let state settle then check vals
      if (this.state.valOrNah1 === 'is-valid' && this.state.valOrNah2 === 'is-valid' && this.state.valOrNah3 === 'is-valid') {
        _axios.default.post(process.env.REACT_APP_sendmail, this.state.msg).then(res => {
          this.setState({
            passMsg: `Thank You ${this.state.name} Your Message Was Sent.`,
            valOrNah1: "is-valid",
            valOrNah2: "is-valid",
            valOrNah3: "is-valid",
            errMsg: ""
          }); //reset entire form and state

          setTimeout(() => {
            this.props.toggle();
            this.setState({
              passMsg: "",
              errMsg: "",
              msg: {
                name: "",
                email: "",
                message: ""
              },
              valOrNah1: "",
              valOrNah2: "",
              valOrNah3: ""
            });
          }, 2000);
        }).catch(err => {
          this.setState({
            errMsg: "server overwhelmed please wait or try again",
            passMsg: ""
          });
        });
      } else {
        this.setState({
          errMsg: "We Cant Send This, please check for errors",
          passMsg: ""
        });
      }
    }, 500);
    e.target.reset();
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_reactstrap.Form, {
      style: _contactStyles.formio,
      onSubmit: this.send,
      "data-testid": "theForm",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 70,
        columnNumber: 1
      }
    }, /*#__PURE__*/_react.default.createElement(_reactstrap.FormGroup, {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 71,
        columnNumber: 1
      }
    }, /*#__PURE__*/_react.default.createElement(_reactstrap.Label, {
      htmlFor: "name",
      style: labe,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 72,
        columnNumber: 1
      }
    }, "Name:"), /*#__PURE__*/_react.default.createElement(_reactstrap.Input, {
      className: this.state.valOrNah1,
      type: "text",
      name: "name",
      id: "name",
      value: this.state.msg.name,
      onChange: e => {
        this.setState({
          msg: { ...this.state.msg,
            name: e.target.value
          }
        });
      },
      placeholder: "Name...",
      style: {
        WebkitTextFillColor: '#000'
      },
      required: true,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 73,
        columnNumber: 1
      }
    }), /*#__PURE__*/_react.default.createElement(_reactstrap.FormText, {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 74,
        columnNumber: 1
      }
    }, "What name can I refer to you as?")), /*#__PURE__*/_react.default.createElement(_reactstrap.FormGroup, {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 76,
        columnNumber: 1
      }
    }, /*#__PURE__*/_react.default.createElement(_reactstrap.Label, {
      htmlFor: "email",
      style: labe,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 77,
        columnNumber: 1
      }
    }, "Email:"), /*#__PURE__*/_react.default.createElement(_reactstrap.Input, {
      className: this.state.valOrNah2,
      type: "email",
      name: "email",
      id: "email",
      value: this.state.msg.email,
      onChange: e => {
        this.setState({
          msg: { ...this.state.msg,
            email: e.target.value
          }
        });
      },
      placeholder: "Email...",
      style: {
        WebkitTextFillColor: '#000'
      },
      required: true,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 78,
        columnNumber: 1
      }
    }), /*#__PURE__*/_react.default.createElement(_reactstrap.FormText, {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 79,
        columnNumber: 1
      }
    }, "You will not recieve any spam or emails period.")), /*#__PURE__*/_react.default.createElement(_reactstrap.FormGroup, {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 81,
        columnNumber: 1
      }
    }, /*#__PURE__*/_react.default.createElement(_reactstrap.Label, {
      htmlFor: "message",
      style: labe,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 82,
        columnNumber: 1
      }
    }, "Message:"), /*#__PURE__*/_react.default.createElement(_reactstrap.Input, {
      className: this.state.valOrNah3,
      type: "textarea",
      name: "message",
      id: "message",
      value: this.state.msg.message,
      onChange: e => {
        this.setState({
          msg: { ...this.state.msg,
            message: e.target.value
          }
        });
      },
      placeholder: "Message...",
      style: {
        WebkitTextFillColor: '#000'
      },
      required: true,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 83,
        columnNumber: 1
      }
    }), /*#__PURE__*/_react.default.createElement(_reactstrap.FormText, {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 84,
        columnNumber: 1
      }
    }, /*#__PURE__*/_react.default.createElement(_contactStyles.Err, {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 84,
        columnNumber: 11
      }
    }, this.state.errMsg), /*#__PURE__*/_react.default.createElement(_contactStyles.Pass, {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 85,
        columnNumber: 1
      }
    }, this.state.passMsg))), /*#__PURE__*/_react.default.createElement(_reactstrap.Button, {
      style: _contactStyles.formBtn,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 87,
        columnNumber: 1
      }
    }, "Send"));
  }

}

var _default = Form_;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,