7a9bbed8d7120ec393c6db893b6648c7
"use strict";

var _interopRequireDefault = require("/home/tgc/Desktop/newSite/-/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _axios = _interopRequireDefault(require("axios"));

var _contactStyles = require("../../util/contactStyles");

var _reactstrap = require("reactstrap");

var _contactValidations = require("../../util/contactValidations");

var _jsxFileName = "/home/tgc/Desktop/newSite/-/src/comps/home/Form.js";

class Form_ extends _react.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      valOrNah1: '',
      valOrNah2: '',
      valOrNah3: '',
      msg: {
        name: '',
        email: '',
        message: ''
      },
      errMsg: '',
      passMsg: ''
    };
    this.send = this.send.bind(this);
  }

  send(e) {
    e.preventDefault();
    !(0, _contactValidations.name_)(this.state.msg.name) ? this.setState({
      //check name
      errMsg: "We Cant Send This, please check for errors",
      valOrNah1: "is-invalid",
      passMsg: ""
    }) : this.setState({
      valOrNah1: "is-valid"
    });
    !(0, _contactValidations.email_)(this.state.msg.email) ? this.setState({
      //check email
      errMsg: "We Cant Send This, please check for errors",
      valOrNah2: "is-invalid",
      passMsg: ""
    }) : this.setState({
      valOrNah2: "is-valid"
    });
    !(0, _contactValidations.msg_)(this.state.msg.message) ? this.setState({
      //check msg
      errMsg: "We Cant Send This, please check for errors",
      valOrNah3: "is-invalid",
      passMsg: ""
    }) : this.setState({
      valOrNah3: "is-valid"
    });
    setTimeout(() => {
      //take a sec to let state settle then check vals
      if (this.state.valOrNah1 === 'is-valid' && this.state.valOrNah2 === 'is-valid' && this.state.valOrNah3 === 'is-valid') {
        _axios.default.post(process.env.REACT_APP_sendmail, this.state.msg).then(res => {
          this.setState({
            passMsg: `Thank You ${this.state.name} Your Message Was Sent.`,
            valOrNah1: "is-valid",
            valOrNah2: "is-valid",
            valOrNah3: "is-valid",
            errMsg: ""
          }); //reset entire form and state

          setTimeout(() => {
            this.toggle();
            this.setState({
              passMsg: "",
              errMsg: "",
              msg: {
                name: "",
                email: "",
                message: ""
              },
              valOrNah1: "",
              valOrNah2: "",
              valOrNah3: ""
            });
          }, 2000);
        }).catch(err => {
          this.setState({
            errMsg: "server overwhelmed please wait or try again",
            passMsg: ""
          });
        });
      } else {
        this.setState({
          errMsg: "We Cant Send This, please check for errors",
          passMsg: ""
        });
      }
    }, 500);
    e.target.reset();
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_reactstrap.Form, {
      style: _contactStyles.formio,
      onSubmit: this.send,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 70,
        columnNumber: 2
      }
    }, /*#__PURE__*/_react.default.createElement(_reactstrap.FormGroup, {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 71,
        columnNumber: 6
      }
    }, /*#__PURE__*/_react.default.createElement(_reactstrap.Label, {
      htmlFor: "name",
      style: {
        WebkitTextFillColor: '#fff',
        fontWeight: 'bolderd'
      },
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 72,
        columnNumber: 9
      }
    }, "Name:"), /*#__PURE__*/_react.default.createElement(_reactstrap.Input, {
      className: this.state.valOrNah1,
      type: "text",
      name: "name",
      id: "name",
      value: this.state.msg.name,
      onChange: e => {
        this.setState({
          msg: { ...this.state.msg,
            name: e.target.value
          }
        });
      },
      placeholder: "Name...",
      style: {
        WebkitTextFillColor: '#000'
      },
      required: true,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 73,
        columnNumber: 9
      }
    }), /*#__PURE__*/_react.default.createElement(_reactstrap.FormText, {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 74,
        columnNumber: 9
      }
    }, "What name can I refer to you as?")), /*#__PURE__*/_react.default.createElement(_reactstrap.FormGroup, {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 76,
        columnNumber: 7
      }
    }, /*#__PURE__*/_react.default.createElement(_reactstrap.Label, {
      htmlFor: "email",
      style: {
        WebkitTextFillColor: '#fff',
        fontWeight: 'bolderd'
      },
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 77,
        columnNumber: 9
      }
    }, "Email:"), /*#__PURE__*/_react.default.createElement(_reactstrap.Input, {
      className: this.state.valOrNah2,
      type: "email",
      name: "email",
      id: "email",
      value: this.state.msg.email,
      onChange: e => {
        this.setState({
          msg: { ...this.state.msg,
            email: e.target.value
          }
        });
      },
      placeholder: "Email...",
      style: {
        WebkitTextFillColor: '#000'
      },
      required: true,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 78,
        columnNumber: 9
      }
    }), /*#__PURE__*/_react.default.createElement(_reactstrap.FormText, {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 79,
        columnNumber: 9
      }
    }, "You will not recieve any spam or emails period.")), /*#__PURE__*/_react.default.createElement(_reactstrap.FormGroup, {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 81,
        columnNumber: 7
      }
    }, /*#__PURE__*/_react.default.createElement(_reactstrap.Label, {
      htmlFor: "message:",
      style: {
        WebkitTextFillColor: '#fff',
        fontWeight: 'bolderd'
      },
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 82,
        columnNumber: 9
      }
    }, "Message:"), /*#__PURE__*/_react.default.createElement(_reactstrap.Input, {
      className: this.state.valOrNah3,
      type: "textarea",
      name: "message",
      id: "message",
      value: this.state.msg.message,
      onChange: e => {
        this.setState({
          msg: { ...this.state.msg,
            message: e.target.value
          }
        });
      },
      placeholder: "Message...",
      style: {
        WebkitTextFillColor: '#000'
      },
      required: true,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 83,
        columnNumber: 9
      }
    }), /*#__PURE__*/_react.default.createElement(_reactstrap.FormText, {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 84,
        columnNumber: 9
      }
    }, /*#__PURE__*/_react.default.createElement(_contactStyles.Err, {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 84,
        columnNumber: 19
      }
    }, this.state.errMsg), /*#__PURE__*/_react.default.createElement(_contactStyles.Pass, {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 85,
        columnNumber: 9
      }
    }, this.state.passMsg))), /*#__PURE__*/_react.default.createElement(_reactstrap.Button, {
      style: _contactStyles.formBtn,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 87,
        columnNumber: 7
      }
    }, "Send"));
  }

}

var _default = Form_;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkZvcm0uanMiXSwibmFtZXMiOlsiRm9ybV8iLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJzdGF0ZSIsInZhbE9yTmFoMSIsInZhbE9yTmFoMiIsInZhbE9yTmFoMyIsIm1zZyIsIm5hbWUiLCJlbWFpbCIsIm1lc3NhZ2UiLCJlcnJNc2ciLCJwYXNzTXNnIiwic2VuZCIsImJpbmQiLCJlIiwicHJldmVudERlZmF1bHQiLCJzZXRTdGF0ZSIsInNldFRpbWVvdXQiLCJheGlvcyIsInBvc3QiLCJwcm9jZXNzIiwiZW52IiwiUkVBQ1RfQVBQX3NlbmRtYWlsIiwidGhlbiIsInJlcyIsInRvZ2dsZSIsImNhdGNoIiwiZXJyIiwidGFyZ2V0IiwicmVzZXQiLCJyZW5kZXIiLCJmb3JtaW8iLCJXZWJraXRUZXh0RmlsbENvbG9yIiwiZm9udFdlaWdodCIsInZhbHVlIiwiZm9ybUJ0biJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFHQSxNQUFNQSxLQUFOLFNBQW9CQyxlQUFNQyxTQUExQixDQUFtQztBQUNsQ0MsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQU87QUFDakIsVUFBTUEsS0FBTjtBQUNBLFNBQUtDLEtBQUwsR0FBVztBQUNYQyxNQUFBQSxTQUFTLEVBQUMsRUFEQztBQUNFQyxNQUFBQSxTQUFTLEVBQUMsRUFEWjtBQUNlQyxNQUFBQSxTQUFTLEVBQUMsRUFEekI7QUFFVEMsTUFBQUEsR0FBRyxFQUFDO0FBQUNDLFFBQUFBLElBQUksRUFBQyxFQUFOO0FBQVNDLFFBQUFBLEtBQUssRUFBQyxFQUFmO0FBQWtCQyxRQUFBQSxPQUFPLEVBQUM7QUFBMUIsT0FGSztBQUdUQyxNQUFBQSxNQUFNLEVBQUMsRUFIRTtBQUdDQyxNQUFBQSxPQUFPLEVBQUM7QUFIVCxLQUFYO0FBTUEsU0FBS0MsSUFBTCxHQUFZLEtBQUtBLElBQUwsQ0FBVUMsSUFBVixDQUFlLElBQWYsQ0FBWjtB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QUQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxPQUFNLEtBQUs5QixLQUFMLENBQVdRLE1BQWpCLENBQVYsZUFDQSw2QkFBQyxtQkFBRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE9BQU8sS0FBS1IsS0FBTCxDQUFXUyxPQUFsQixDQURBLENBSEYsQ0FYTCxlQWlCSyw2QkFBQyxrQkFBRDtBQUFRLE1BQUEsS0FBSyxFQUFFd0Isc0JBQWY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxjQWpCTCxDQUZDO0FBdUJBOztBQW5GaUM7O2VBd0ZwQnRDLEsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnXG5pbXBvcnQgeyBFcnIsUGFzcyxmb3JtQnRuLGZvcm1pb30gZnJvbSAnLi4vLi4vdXRpbC9jb250YWN0U3R5bGVzJ1xuaW1wb3J0IHtGb3JtLEZvcm1Hcm91cCxJbnB1dCxMYWJlbCwgQnV0dG9uICwgRm9ybVRleHQgfSBmcm9tICdyZWFjdHN0cmFwJztcbmltcG9ydCB7bmFtZV8sZW1haWxfLG1zZ199IGZyb20gJy4uLy4uL3V0aWwvY29udGFjdFZhbGlkYXRpb25zJ1xuXG5cbmNsYXNzIEZvcm1fIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50e1xuXHRjb25zdHJ1Y3Rvcihwcm9wcyl7XG5cdFx0c3VwZXIocHJvcHMpXG5cdFx0dGhpcy5zdGF0ZT17XG5cdCB2YWxPck5haDE6JycsdmFsT3JOYWgyOicnLHZhbE9yTmFoMzonJyxcbiAgICBtc2c6e25hbWU6JycsZW1haWw6JycsbWVzc2FnZTonJ30sXG4gICAgZXJyTXNnOicnLHBhc3NNc2c6Jydcblx0XHR9XG5cbiAgdGhpcy5zZW5kID0gdGhpcy5zZW5kLmJpbmQodGhpcylcblxuXHR9XG5cbiBcbiBzZW5kKGUpe1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuXG4gICAgIW5hbWVfKHRoaXMuc3RhdGUubXNnLm5hbWUpP3RoaXMuc2V0U3RhdGUoey8vY2hlY2sgbmFtZVxuICAgICAgICBlcnJNc2c6XCJXZSBDYW50IFNlbmQgVGhpcywgcGxlYXNlIGNoZWNrIGZvciBlcnJvcnNcIixcbiAgICAgICAgdmFsT3JOYWgxOlwiaXMtaW52YWxpZFwiLFxuICAgICAgICBwYXNzTXNnOlwiXCJcbiAgICAgIH0pOnRoaXMuc2V0U3RhdGUoe3ZhbE9yTmFoMTpcImlzLXZhbGlkXCJ9KTtcblxuICAgICAgICFlbWFpbF8odGhpcy5zdGF0ZS5tc2cuZW1haWwpP3RoaXMuc2V0U3RhdGUoey8vY2hlY2sgZW1haWxcbiAgICAgICAgZXJyTXNnOlwiV2UgQ2FudCBTZW5kIFRoaXMsIHBsZWFzZSBjaGVjayBmb3IgZXJyb3JzXCIsXG4gICAgICAgIHZhbE9yTmFoMjpcImlzLWludmFsaWRcIixcbiAgICAgICAgcGFzc01zZzpcIlwiXG4gICAgICB9KTp0aGlzLnNldFN0YXRlKHt2YWxPck5haDI6XCJpcy12YWxpZFwifSk7XG5cblxuICAgICAgICFtc2dfKHRoaXMuc3RhdGUubXNnLm1lc3NhZ2UpP3RoaXMuc2V0U3RhdGUoey8vY2hlY2sgbXNnXG4gICAgICAgIGVyck1zZzpcIldlIENhbnQgU2VuZCBUaGlzLCBwbGVhc2UgY2hlY2sgZm9yIGVycm9yc1wiLFxuICAgICAgICB2YWxPck5haDM6XCJpcy1pbnZhbGlkXCIsXG4gICAgICAgIHBhc3NNc2c6XCJcIlxuICAgICAgfSk6dGhpcy5zZXRTdGF0ZSh7dmFsT3JOYWgzOlwiaXMtdmFsaWRcIn0pO1xuXG4gICAgc2V0VGltZW91dCgoKT0+ey8vdGFrZSBhIHNlYyB0byBsZXQgc3RhdGUgc2V0dGxlIHRoZW4gY2hlY2sgdmFsc1xuICAgICAgIGlmKHRoaXMuc3RhdGUudmFsT3JOYWgxID09PSAnaXMtdmFsaWQnICYmIHRoaXMuc3RhdGUudmFsT3JOYWgyID09PSAnaXMtdmFsaWQnICYmIHRoaXMuc3RhdGUudmFsT3JOYWgzID09PSAnaXMtdmFsaWQnKXtcbiAgICAgICAgYXhpb3MucG9zdChwcm9jZXNzLmVudi5SRUFDVF9BUFBfc2VuZG1haWxcbiAgICAgICx0aGlzLnN0YXRlLm1zZylcbiAgICAudGhlbihyZXM9PntcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHBhc3NNc2c6YFRoYW5rIFlvdSAke3RoaXMuc3RhdGUubmFtZX0gWW91ciBNZXNzYWdlIFdhcyBTZW50LmAsXG4gICAgICAgIHZhbE9yTmFoMTpcImlzLXZhbGlkXCIsdmFsT3JOYWgyOlwiaXMtdmFsaWRcIix2YWxPck5haDM6XCJpcy12YWxpZFwiLGVyck1zZzpcIlwiXG4gICAgICB9KVxuICAgICAgICAgIC8vcmVzZXQgZW50aXJlIGZvcm0gYW5kIHN0YXRlXG4gICAgIHNldFRpbWVvdXQoKCk9Pnt0aGlzLnRvZ2dsZSgpO3RoaXMuc2V0U3RhdGUoe3Bhc3NNc2c6XCJcIixlcnJNc2c6XCJcIixtc2c6e25hbWU6XCJcIixlbWFpbDpcIlwiLG1lc3NhZ2U6XCJcIn0sdmFsT3JOYWgxOlwiXCIsdmFsT3JOYWgyOlwiXCIsdmFsT3JOYWgzOlwiXCIsfSl9LDIwMDApXG5cbiAgICB9KS5jYXRjaChlcnI9Pnt0aGlzLnNldFN0YXRlKHtlcnJNc2c6XCJzZXJ2ZXIgb3ZlcndoZWxtZWQgcGxlYXNlIHdhaXQgb3IgdHJ5IGFnYWluXCIscGFzc01zZzpcIlwifSl9KVxuXG4gICAgfWVsc2V7dGhpcy5zZXRTdGF0ZSh7ZXJyTXNnOlwiV2UgQ2FudCBTZW5kIFRoaXMsIHBsZWFzZSBjaGVjayBmb3IgZXJyb3JzXCIscGFzc01zZzpcIlwifSl9XG59LDUwMClcblxuXG5cbiAgICAgIGUudGFyZ2V0LnJlc2V0KClcbn1cblxuXG5cdHJlbmRlcigpe1xuXHRcdHJldHVybihcblxuXHQ8Rm9ybSBzdHlsZT17Zm9ybWlvfSAgb25TdWJtaXQ9e3RoaXMuc2VuZH0+XG4gICAgIDxGb3JtR3JvdXA+XG4gICAgICAgIDxMYWJlbCBodG1sRm9yPVwibmFtZVwiIHN0eWxlPXt7V2Via2l0VGV4dEZpbGxDb2xvcjonI2ZmZicsZm9udFdlaWdodDonYm9sZGVyZCd9fT5OYW1lOjwvTGFiZWw+XG4gICAgICAgIDxJbnB1dCBjbGFzc05hbWU9e3RoaXMuc3RhdGUudmFsT3JOYWgxfSB0eXBlPVwidGV4dFwiIG5hbWU9XCJuYW1lXCIgaWQ9XCJuYW1lXCIgdmFsdWU9e3RoaXMuc3RhdGUubXNnLm5hbWV9IG9uQ2hhbmdlPXsoZSk9Pnt0aGlzLnNldFN0YXRlKHttc2c6ey4uLnRoaXMuc3RhdGUubXNnLG5hbWU6ZS50YXJnZXQudmFsdWV9fSl9fSBwbGFjZWhvbGRlcj1cIk5hbWUuLi5cIiAgc3R5bGU9e3tXZWJraXRUZXh0RmlsbENvbG9yOicjMDAwJ319IHJlcXVpcmVkLz5cbiAgICAgICAgPEZvcm1UZXh0PldoYXQgbmFtZSBjYW4gSSByZWZlciB0byB5b3UgYXM/PC9Gb3JtVGV4dD5cbiAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgPExhYmVsIGh0bWxGb3I9XCJlbWFpbFwiIHN0eWxlPXt7V2Via2l0VGV4dEZpbGxDb2xvcjonI2ZmZicsZm9udFdlaWdodDonYm9sZGVyZCd9fT5FbWFpbDo8L0xhYmVsPlxuICAgICAgICA8SW5wdXQgY2xhc3NOYW1lPXt0aGlzLnN0YXRlLnZhbE9yTmFoMn0gIHR5cGU9XCJlbWFpbFwiIG5hbWU9XCJlbWFpbFwiIGlkPVwiZW1haWxcIiB2YWx1ZT17dGhpcy5zdGF0ZS5tc2cuZW1haWx9IG9uQ2hhbmdlPXsoZSk9Pnt0aGlzLnNldFN0YXRlKHttc2c6ey4uLnRoaXMuc3RhdGUubXNnLGVtYWlsOmUudGFyZ2V0LnZhbHVlfX0pfX0gcGxhY2Vob2xkZXI9XCJFbWFpbC4uLlwiIHN0eWxlPXt7V2Via2l0VGV4dEZpbGxDb2xvcjonIzAwMCd9fSByZXF1aXJlZC8+XG4gICAgICAgIDxGb3JtVGV4dD5Zb3Ugd2lsbCBub3QgcmVjaWV2ZSBhbnkgc3BhbSBvciBlbWFpbHMgcGVyaW9kLjwvRm9ybVRleHQ+XG4gICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgIDxMYWJlbCBodG1sRm9yPVwibWVzc2FnZTpcIiBzdHlsZT17e1dlYmtpdFRleHRGaWxsQ29sb3I6JyNmZmYnLGZvbnRXZWlnaHQ6J2JvbGRlcmQnfX0+TWVzc2FnZTo8L0xhYmVsPlxuICAgICAgICA8SW5wdXQgY2xhc3NOYW1lPXt0aGlzLnN0YXRlLnZhbE9yTmFoM30gdHlwZT1cInRleHRhcmVhXCIgbmFtZT1cIm1lc3NhZ2VcIiBpZD1cIm1lc3NhZ2VcIiB2YWx1ZT17dGhpcy5zdGF0ZS5tc2cubWVzc2FnZX0gb25DaGFuZ2U9eyhlKT0+e3RoaXMuc2V0U3RhdGUoe21zZzp7Li4udGhpcy5zdGF0ZS5tc2csbWVzc2FnZTplLnRhcmdldC52YWx1ZX19KX19IHBsYWNlaG9sZGVyPVwiTWVzc2FnZS4uLlwiIHN0eWxlPXt7V2Via2l0VGV4dEZpbGxDb2xvcjonIzAwMCd9fSByZXF1aXJlZC8+XG4gICAgICAgIDxGb3JtVGV4dD48RXJyPnt0aGlzLnN0YXRlLmVyck1zZ308L0Vycj5cbiAgICAgICAgPFBhc3M+e3RoaXMuc3RhdGUucGFzc01zZ308L1Bhc3M+PC9Gb3JtVGV4dD5cbiAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgPEJ1dHRvbiBzdHlsZT17Zm9ybUJ0bn0+U2VuZDwvQnV0dG9uPlxuICAgIDwvRm9ybT5cblxuXHRcdFx0KVxuXHR9XG59XG5cblxuXG5leHBvcnQgZGVmYXVsdCBGb3JtXyJdfQ==