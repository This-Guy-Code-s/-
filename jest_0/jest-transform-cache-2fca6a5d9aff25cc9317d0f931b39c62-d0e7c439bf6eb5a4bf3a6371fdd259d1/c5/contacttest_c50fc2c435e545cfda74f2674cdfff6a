88fe16afd646c5db731dc96651c94008
"use strict";

var _interopRequireDefault = require("/home/tgc/Desktop/newSite/-/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _Contact = _interopRequireDefault(require("../Contact"));

var _Form = _interopRequireDefault(require("../Form"));

var _react2 = require("@testing-library/react");

var _redux = require("redux");

var _reduxThunk = _interopRequireDefault(require("redux-thunk"));

var _reducers = require("../../../redux/reducers");

var _reactRedux = require("react-redux");

var _jsxFileName = "/home/tgc/Desktop/newSite/-/src/comps/home/testing/contact.test.js";
const store = (0, _redux.createStore)(_reducers.reducer, (0, _redux.applyMiddleware)(_reduxThunk.default));
const props = {
  name: 'Guy',
  email: 'GuyTheGreat@gmail.com',
  message: 'this is the message',
  send: jest.fn()
};
test('Form renders with out crashing', async () => {
  const {
    screen,
    getByText
  } = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
    store: store,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 24,
      columnNumber: 36
    }
  }, /*#__PURE__*/_react.default.createElement(_Form.default, Object.assign({}, props, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 24,
      columnNumber: 60
    }
  })))); // const form = screen.getByText('form')

  console.log(sceen); // expect()
});
test('Form renders with out crashing', async () => {
  const {
    screen,
    fireEvent,
    getAllByPlaceholderText,
    getByText,
    getByLabelText
  } = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
    store: store,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 34,
      columnNumber: 86
    }
  }, /*#__PURE__*/_react.default.createElement(_Form.default, Object.assign({}, props, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 34,
      columnNumber: 110
    }
  }))));
  let nameLabel = getByLabelText('Name:');
  let emailLabel = getByLabelText('Email:');
  let msgLabel = getByLabelText('Message:');
  let nameVal = getAllByPlaceholderText('Name...');
  let emailVal = getAllByPlaceholderText('Email...');
  let msgVal = getAllByPlaceholderText('Message...');
  expect(nameVal.value).toEqual(undefined);
  expect(emailVal.value).toEqual(undefined);
  expect(msgVal.value).toEqual(undefined);
  nameVal.value = props.name;
  emailVal.value = props.email;
  msgVal.value = props.message;
  expect(nameVal.value).toMatch('Guy');
  expect(emailVal.value).toMatch('GuyTheGreat@gmail.com');
  expect(emailVal.value).toMatch(/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/);
  expect(msgVal.value).toMatch('this is the message');
  fireEvent.click(screen.getByText(/Send/i));
});
test('Form renders with out crashing', async () => {
  const {
    screen,
    fireEvent,
    getAllByPlaceholderText,
    getByText,
    getByLabelText
  } = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
    store: store,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 65,
      columnNumber: 86
    }
  }, /*#__PURE__*/_react.default.createElement(_Form.default, Object.assign({}, props, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 65,
      columnNumber: 110
    }
  }))));
  let nameLabel = getByLabelText('Name:');
  let emailLabel = getByLabelText('Email:');
  let msgLabel = getByLabelText('Message:');
  let nameVal = getAllByPlaceholderText('Name...');
  let emailVal = getAllByPlaceholderText('Email...');
  let msgVal = getAllByPlaceholderText('Message...');
  expect(nameVal.value).toEqual(undefined);
  expect(emailVal.value).toEqual(undefined);
  expect(msgVal.value).toEqual(undefined);
  nameVal.value = props.name;
  emailVal.value = props.email;
  msgVal.value = props.message;
  expect(nameVal.value).toMatch('Guy');
  expect(emailVal.value).toMatch('GuyTheGreat@gmail.com');
  expect(emailVal.value).toMatch(/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/);
  expect(msgVal.value).toMatch('this is the message');
  fireEvent.click(screen.getByText(/Send/i));
});
test('Form renders with out crashing', async () => {
  const {
    screen,
    fireEvent,
    getAllByPlaceholderText,
    getByText,
    getByLabelText
  } = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
    store: store,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 96,
      columnNumber: 86
    }
  }, /*#__PURE__*/_react.default.createElement(_Form.default, Object.assign({}, props, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 96,
      columnNumber: 110
    }
  }))));
  let nameLabel = getByLabelText('Name:');
  let emailLabel = getByLabelText('Email:');
  let msgLabel = getByLabelText('Message:');
  let nameVal = getAllByPlaceholderText('Name...');
  let emailVal = getAllByPlaceholderText('Email...');
  let msgVal = getAllByPlaceholderText('Message...');
  expect(nameVal.value).toEqual(undefined);
  expect(emailVal.value).toEqual(undefined);
  expect(msgVal.value).toEqual(undefined);
  nameVal.value = props.name;
  emailVal.value = props.email;
  msgVal.value = props.message;
  expect(nameVal.value).toMatch('Guy');
  expect(emailVal.value).toMatch('GuyTheGreat@gmail.com');
  expect(emailVal.value).toMatch(/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/);
  expect(msgVal.value).toMatch('this is the message');
  fireEvent.click(screen.getByText(/Send/i));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,