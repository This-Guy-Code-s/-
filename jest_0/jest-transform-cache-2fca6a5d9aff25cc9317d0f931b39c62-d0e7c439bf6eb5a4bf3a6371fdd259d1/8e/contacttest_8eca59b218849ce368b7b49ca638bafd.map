{"version":3,"sources":["contact.test.js"],"names":["store","reducer","thunk","props","name","email","message","send","jest","fn","test","screen","getByText","container","expect","toBeTruthy","toMatchSnapshot","innerHTML","toMatch","fireEvent","getAllByPlaceholderText","getByLabelText","nameLabel","emailLabel","msgLabel"],"mappings":";;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;AAGA,MAAMA,KAAK,GAAG,wBAAYC,iBAAZ,EAAoB,4BAAgBC,mBAAhB,CAApB,CAAd;AAGA,MAAMC,KAAK,GAAG;AACbC,EAAAA,IAAI,EAAC,KADQ;AAEbC,EAAAA,KAAK,EAAC,uBAFO;AAGbC,EAAAA,OAAO,EAAC,qBAHK;AAIbC,EAAAA,IAAI,EAACC,IAAI,CAACC,EAAL;AAJQ,CAAd;AAYAC,IAAI,CAAC,gCAAD,EAAmC,YAAU;AAChD,QAAM;AAACC,IAAAA,MAAD;AAAQC,IAAAA,SAAR;AAAkBC,IAAAA;AAAlB,MAA+B,kCAAO,6BAAC,oBAAD;AAAU,IAAA,KAAK,EAAEb,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAwB,6BAAC,aAAD,oBAAUG,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAxB,CAAP,CAArC;AACCW,EAAAA,MAAM,CAACD,SAAD,CAAN,CAAkBE,UAAlB,GAF+C,CAEjB;;AAC9BD,EAAAA,MAAM,CAACD,SAAD,CAAN,CAAkBG,eAAlB,GAH+C,CAGZ;;AACnCF,EAAAA,MAAM,CAACD,SAAS,CAACI,SAAX,CAAN,CAA4BC,OAA5B,CAAoC,OAApC,EAJ+C,CAIH;AAE7C,CANG,CAAJ;AAaAR,IAAI,CAAC,0CAAD,EAA6C,YAAU;AAC1D,QAAM;AAACC,IAAAA,MAAD;AAASQ,IAAAA,SAAT;AAAmBC,IAAAA,uBAAnB;AAA2CR,IAAAA,SAA3C;AAAqDS,IAAAA;AAArD,MAAuE,kCAAO,6BAAC,oBAAD;AAAU,IAAA,KAAK,EAAErB,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAwB,6BAAC,aAAD,oBAAUG,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAxB,CAAP,CAA7E;AAEG,MAAImB,SAAS,GAAGD,cAAc,CAAC,OAAD,CAA9B,CAHuD,CAGhB;;AACvC,MAAIE,UAAU,GAAGF,cAAc,CAAC,QAAD,CAA/B,CAJuD,CAId;;AACzC,MAAIG,QAAQ,GAAGH,cAAc,CAAC,UAAD,CAA7B,CALuD,CAKd;;AAGzCP,EAAAA,MAAM,CAACQ,SAAD,CAAN,CAAkBP,UAAlB;AACAD,EAAAA,MAAM,CAACS,UAAD,CAAN,CAAmBR,UAAnB;AACAD,EAAAA,MAAM,CAACU,QAAD,CAAN,CAAiBT,UAAjB;AAEH,CAZG,CAAJ,C,CAkBA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport ContactBtn from '../Contact'\nimport Form from '../Form'\nimport { render } from '@testing-library/react'\n\nimport {createStore,applyMiddleware} from 'redux'\nimport thunk from 'redux-thunk'\nimport {reducer} from '../../../redux/reducers'\nimport {Provider} from 'react-redux'\n\n\nconst store = createStore(reducer,applyMiddleware(thunk))\n\n\nconst props = {\n\tname:'Guy',\n\temail:'GuyTheGreat@gmail.com',\n\tmessage:'this is the message',\n\tsend:jest.fn()\n}\n\n\n\n\n\n\ntest('Form renders with out crashing', async ()=>{\n\tconst {screen,getByText,container} = render(<Provider store={store}><Form {...props}/></Provider>)\n\t\texpect(container).toBeTruthy()//renders\n\t\texpect(container).toMatchSnapshot()//matches snap shot of its self(code)\n\t\texpect(container.innerHTML).toMatch(/<form/)//form tag is converted version(HTML5) and not react\n\n})\t\t\n\n\n\n\n\n\ntest('labels render and have props text titles', async ()=>{\n\tconst {screen, fireEvent,getAllByPlaceholderText,getByText,getByLabelText} = render(<Provider store={store}><Form {...props}/></Provider>)\n\t\t\t\t\n\t\t\t\tlet nameLabel = getByLabelText('Name:')//name label\n\t\t\t\tlet emailLabel = getByLabelText('Email:')//email label\n\t\t\t\tlet msgLabel = getByLabelText('Message:')//message label\n\n\t\t\t\t\n\t\t\t\texpect(nameLabel).toBeTruthy()\n\t\t\t\texpect(emailLabel).toBeTruthy()\n\t\t\t\texpect(msgLabel).toBeTruthy()\n\n})\t\t\n\n\n\n\n\n// test('labels render and have props text titles', async ()=>{\n// \tconst {screen, fireEvent,getAllByPlaceholderText,getByText,getByLabelText} = render(<Provider store={store}><Form {...props}/></Provider>)\n\t\t\t\t\n// \t\t\t\tlet nameLabel = getByLabelText('Name:')//name label\n// \t\t\t\tlet emailLabel = getByLabelText('Email:')//email label\n// \t\t\t\tlet msgLabel = getByLabelText('Message:')//message label\n\n// \t\t\t\tlet nameVal = getAllByPlaceholderText('Name...')//name input\n// \t\t\t\tlet emailVal = getAllByPlaceholderText('Email...')//email input\n// \t\t\t\tlet msgVal = getAllByPlaceholderText('Message...')//msg input\n\n// \t\t\t\texpect(nameVal.value).toEqual(undefined)//start out with no values(empty inputs)\n// \t\t\t\texpect(emailVal.value).toEqual(undefined)//start out with no values(empty inputs)\n// \t\t\t\texpect(msgVal.value).toEqual(undefined)//start out with no values(empty inputs)\n\n\n\n// \t\t\t\t//value sent to inputs from props obj\n// \t\t\t\tnameVal.value = props.name//giving the value of \"Guy\"\n// \t\t\t\temailVal.value = props.email//giving the value of \"GuyTheGreat@gmail.com\"\n// \t\t\t\tmsgVal.value = props.message//giving the value of \"this is the message\"\n\n// \t\t\t\t//input values held change\n// \t\t\t\texpect(nameVal.value).toMatch('Guy')\n// \t\t\t\texpect(emailVal.value).toMatch('GuyTheGreat@gmail.com')\n// \t\t\t\texpect(emailVal.value).toMatch(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)\n// \t\t\t\texpect(msgVal.value).toMatch('this is the message')\n\n\n\n// })\t\t\n\n\n"]}