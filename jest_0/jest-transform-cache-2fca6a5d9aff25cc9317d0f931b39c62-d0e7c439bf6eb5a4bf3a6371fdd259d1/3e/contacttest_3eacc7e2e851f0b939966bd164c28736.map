{"version":3,"sources":["contact.test.js"],"names":["store","reducer","thunk","props","name","email","message","test","screen","getByTestId","container","theForm","expect","toBeTruthy","toMatchSnapshot","innerHTML","toMatch","fireEvent","getAllByPlaceholderText","getByText","getByLabelText","nameLabel","emailLabel","msgLabel","nameVal","emailVal","msgVal","value","toEqual","undefined","label2Input_name","split","label2Input_email","label2Input_msg"],"mappings":"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","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport ContactBtn from '../Contact'\nimport Form from '../Form'\nimport { render } from '@testing-library/react'\n\nimport {createStore,applyMiddleware} from 'redux'\nimport thunk from 'redux-thunk'\nimport {reducer} from '../../../redux/reducers'\nimport {Provider} from 'react-redux'\n\n\nconst store = createStore(reducer,applyMiddleware(thunk))\n\n\nconst props = {\n\tname:'Guy',\n\temail:'GuyTheGreat@gmail.com',\n\tmessage:'this is the message',\n\t\n}\n\n\n\n\n\n\ntest('Form renders with out crashing', async ()=>{\n\tconst {screen,getByTestId,container} = render(<Provider store={store}><Form {...props}/></Provider>)\n\t\t\t\n\t\tconst theForm = getByTestId('theForm')\n\t\t\t\n\n\t\texpect(theForm).toBeTruthy()//renders\n\t\texpect(theForm).toMatchSnapshot()//matches snap shot of its self(code)\n\t\texpect(container.innerHTML).toMatch(/<form/)//form tag is converted version(HTML5) and not react\n\n})\t\t\n\n\n\n\n\n\ntest('labels render and have proper text titles', async ()=>{\n\tconst {screen, fireEvent,getAllByPlaceholderText,getByText,getByLabelText} = render(<Provider store={store}><Form {...props}/></Provider>)\n\t\t\t\t\n\t\t\t\tlet nameLabel = getByLabelText('Name:')//name label\n\t\t\t\tlet emailLabel = getByLabelText('Email:')//email label\n\t\t\t\tlet msgLabel = getByLabelText('Message:')//message label\n\n\t\t\t\texpect(nameLabel).toMatchSnapshot()\n\t\t\t\texpect(nameLabel).toBeTruthy()\n\n\t\t\t\texpect(emailLabel).toMatchSnapshot()\n\t\t\t\texpect(emailLabel).toBeTruthy()\n\n\t\t\t\texpect(msgLabel).toMatchSnapshot()\n\t\t\t\texpect(msgLabel).toBeTruthy()\n\n})\t\t\n\n\n\n\n\ntest('inputs render and can take values', async ()=>{\n\tconst {screen, fireEvent,getAllByPlaceholderText,getByText,getByLabelText} = render(<Provider store={store}><Form {...props}/></Provider>)\n\t\t\t\n\t\t\t\tlet nameVal = getAllByPlaceholderText('Name...')//name input\n\t\t\t\tlet emailVal = getAllByPlaceholderText('Email...')//email input\n\t\t\t\tlet msgVal = getAllByPlaceholderText('Message...')//msg input\n\n\t\t\t\texpect(nameVal.value).toEqual(undefined)//start out with no values(empty inputs)\n\t\t\t\texpect(emailVal.value).toEqual(undefined)//start out with no values(empty inputs)\n\t\t\t\texpect(msgVal.value).toEqual(undefined)//start out with no values(empty inputs)\n\n\n\n\t\t\t\t//value sent to inputs from props obj\n\t\t\t\tnameVal.value = props.name//giving the value of \"Guy\"\n\t\t\t\temailVal.value = props.email//giving the value of \"GuyTheGreat@gmail.com\"\n\t\t\t\tmsgVal.value = props.message//giving the value of \"this is the message\"\n\n\t\t\t\t//input values held change\n\t\t\t\texpect(nameVal.value).toMatch('Guy')\n\t\t\t\texpect(emailVal.value).toMatch('GuyTheGreat@gmail.com')\n\t\t\t\texpect(emailVal.value).toMatch(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)\n\t\t\t\texpect(msgVal.value).toMatch('this is the message')\n\n\n\n})\t\t\n\n\ntest('inputs \"name\" attribute values connects/equals its proper label tag with its \"for\" attributes value', async ()=>{\n\tconst {container,screen, fireEvent,getAllByPlaceholderText,getByText,getByLabelText} = render(<Provider store={store}><Form {...props}/></Provider>)\n\t\t\t\n\n\t\t\t//turns string form component into a string then into an Array split by the parent div of each label tag\n\t\t\t//then each label tag was saved to its own variable to run RegExp test confirm the \"for\" attributes value\n\t\t\t//in the label tag matches the same value as the name attribute value in the input tags\n\t\t\t//console.log(container.innerHTML.split('<div class=\"form-group\">'))\n\n\t\t\tconst label2Input_name = container.innerHTML.split('<div class=\"form-group\">')[1]\n\t\t\tconst label2Input_email = container.innerHTML.split('<div class=\"form-group\">')[2]\n\t\t\tconst label2Input_msg = container.innerHTML.split('<div class=\"form-group\">')[3]\n\n\t\t\texpect(/for=\"name\"/.test(label2Input_name) && \n\t\t\t\t\t\t/name=\"name\"/.test(label2Input_name)).toEqual(true)\n\n\t\t\texpect(/for=\"email\"/.test(label2Input_email) && \n\t\t\t\t\t\t/name=\"email\"/.test(label2Input_email)).toEqual(true)\n\t\t\t\n\t\t\texpect(/for=\"message\"/.test(label2Input_msg) && \n\t\t\t\t\t\t/name=\"message\"/.test(label2Input_msg)).toEqual(true)\n\n\n\n})\t\t\n\n\ntest('tester', async ()=>{\n\tconst {container,fireEvent,getByTestId} = render(<Provider store={store}><Form {...props}/></Provider>)\n\t\tconst theForm = getByTestId('theForm')\n\n})"]}