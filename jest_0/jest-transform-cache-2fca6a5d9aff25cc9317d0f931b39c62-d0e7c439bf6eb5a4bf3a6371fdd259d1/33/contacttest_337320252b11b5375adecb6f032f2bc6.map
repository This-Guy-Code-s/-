{"version":3,"sources":["contact.test.js"],"names":["store","reducer","thunk","props","name","email","message","send","jest","fn","test","screen","getByText","container","expect","toBeTruthy","toMatchSnapshot","innerHTML","toMatch","fireEvent","getAllByPlaceholderText","getByLabelText","nameLabel","emailLabel","msgLabel","nameVal","emailVal","msgVal","value","toEqual","undefined"],"mappings":"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","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport ContactBtn from '../Contact'\nimport Form from '../Form'\nimport { render } from '@testing-library/react'\n\nimport {createStore,applyMiddleware} from 'redux'\nimport thunk from 'redux-thunk'\nimport {reducer} from '../../../redux/reducers'\nimport {Provider} from 'react-redux'\n\n\nconst store = createStore(reducer,applyMiddleware(thunk))\n\n\nconst props = {\n\tname:'Guy',\n\temail:'GuyTheGreat@gmail.com',\n\tmessage:'this is the message',\n\tsend:jest.fn()\n}\n\n\n\n\n\n\ntest('Form renders with out crashing', async ()=>{\n\tconst {screen,getByText,container} = render(<Provider store={store}><Form {...props}/></Provider>)\n\t\texpect(container).toBeTruthy()//renders\n\t\texpect(container).toMatchSnapshot()//matches snap shot of its self(code)\n\t\texpect(container.innerHTML).toMatch(/<form/)//form tag is converted version(HTML5) and not react\n\n})\t\t\n\n\n\n\n\n\ntest('labes and inputs render and take values', async ()=>{\n\tconst {screen, fireEvent,getAllByPlaceholderText,getByText,getByLabelText} = render(<Provider store={store}><Form {...props}/></Provider>)\n\t\t\t\t\n\t\t\t\tlet nameLabel = getByLabelText('Name:')//name label\n\t\t\t\tlet emailLabel = getByLabelText('Email:')//email label\n\t\t\t\tlet msgLabel = getByLabelText('Message:')//message label\n\n\t\t\t\tlet nameVal = getAllByPlaceholderText('Name...')//name input\n\t\t\t\tlet emailVal = getAllByPlaceholderText('Email...')//email input\n\t\t\t\tlet msgVal = getAllByPlaceholderText('Message...')//msg input\n\n\t\t\t\texpect(nameVal.value).toEqual(undefined)//start out with no values(empty inputs)\n\t\t\t\texpect(emailVal.value).toEqual(undefined)//start out with no values(empty inputs)\n\t\t\t\texpect(msgVal.value).toEqual(undefined)//start out with no values(empty inputs)\n\n\n\n\t\t\t\t//value sent to inputs from props obj\n\t\t\t\tnameVal.value = props.name//giving the value of \"Guy\"\n\t\t\t\temailVal.value = props.email//giving the value of \"GuyTheGreat@gmail.com\"\n\t\t\t\tmsgVal.value = props.message//giving the value of \"this is the message\"\n\n\t\t\t\t//input values held change\n\t\t\t\texpect(nameVal.value).toMatch('Guy')\n\t\t\t\texpect(emailVal.value).toMatch('GuyTheGreat@gmail.com')\n\t\t\t\texpect(emailVal.value).toMatch(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)\n\t\t\t\texpect(msgVal.value).toMatch('this is the message')\n\n\n\n})\t\t\n\n\n"]}