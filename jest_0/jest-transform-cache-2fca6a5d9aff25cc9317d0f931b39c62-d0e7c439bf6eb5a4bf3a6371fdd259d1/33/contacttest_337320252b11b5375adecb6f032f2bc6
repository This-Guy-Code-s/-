d55b3d7f190384c1698704244a43c027
"use strict";

var _interopRequireDefault = require("/home/tgc/Desktop/newSite/-/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _Contact = _interopRequireDefault(require("../Contact"));

var _Form = _interopRequireDefault(require("../Form"));

var _react2 = require("@testing-library/react");

var _redux = require("redux");

var _reduxThunk = _interopRequireDefault(require("redux-thunk"));

var _reducers = require("../../../redux/reducers");

var _reactRedux = require("react-redux");

var _jsxFileName = "/home/tgc/Desktop/newSite/-/src/comps/home/testing/contact.test.js";
const store = (0, _redux.createStore)(_reducers.reducer, (0, _redux.applyMiddleware)(_reduxThunk.default));
const props = {
  name: 'Guy',
  email: 'GuyTheGreat@gmail.com',
  message: 'this is the message',
  send: jest.fn()
};
test('Form renders with out crashing', async () => {
  const {
    screen,
    getByText,
    container
  } = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
    store: store,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 29,
      columnNumber: 46
    }
  }, /*#__PURE__*/_react.default.createElement(_Form.default, Object.assign({}, props, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 29,
      columnNumber: 70
    }
  }))));
  expect(container).toBeTruthy(); //renders

  expect(container).toMatchSnapshot(); //matches snap shot of its self(code)

  expect(container.innerHTML).toMatch(/<form/); //form tag is converted version(HTML5) and not react
});
test('labes and inputs render and take values', async () => {
  const {
    screen,
    fireEvent,
    getAllByPlaceholderText,
    getByText,
    getByLabelText
  } = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
    store: store,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 42,
      columnNumber: 86
    }
  }, /*#__PURE__*/_react.default.createElement(_Form.default, Object.assign({}, props, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 42,
      columnNumber: 110
    }
  }))));
  let nameLabel = getByLabelText('Name:'); //name label

  let emailLabel = getByLabelText('Email:'); //email label

  let msgLabel = getByLabelText('Message:'); //message label

  let nameVal = getAllByPlaceholderText('Name...'); //name input

  let emailVal = getAllByPlaceholderText('Email...'); //email input

  let msgVal = getAllByPlaceholderText('Message...'); //msg input

  expect(nameVal.value).toEqual(undefined); //start out with no values(empty inputs)

  expect(emailVal.value).toEqual(undefined); //start out with no values(empty inputs)

  expect(msgVal.value).toEqual(undefined); //start out with no values(empty inputs)
  //value sent to inputs from props obj

  nameVal.value = props.name; //giving the value of "Guy"

  emailVal.value = props.email; //giving the value of "GuyTheGreat@gmail.com"

  msgVal.value = props.message; //giving the value of "this is the message"
  //input values held change

  expect(nameVal.value).toMatch('Guy');
  expect(emailVal.value).toMatch('GuyTheGreat@gmail.com');
  expect(emailVal.value).toMatch(/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/);
  expect(msgVal.value).toMatch('this is the message');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRhY3QudGVzdC5qcyJdLCJuYW1lcyI6WyJzdG9yZSIsInJlZHVjZXIiLCJ0aHVuayIsInByb3BzIiwibmFtZSIsImVtYWlsIiwibWVzc2FnZSIsInNlbmQiLCJqZXN0IiwiZm4iLCJ0ZXN0Iiwic2NyZWVuIiwiZ2V0QnlUZXh0IiwiY29udGFpbmVyIiwiZXhwZWN0IiwidG9CZVRydXRoeSIsInRvTWF0Y2hTbmFwc2hvdCIsImlubmVySFRNTCIsInRvTWF0Y2giLCJmaXJlRXZlbnQiLCJnZXRBbGxCeVBsYWNlaG9sZGVyVGV4dCIsImdldEJ5TGFiZWxUZXh0IiwibmFtZUxhYmVsIiwiZW1haWxMYWJlbCIsIm1zZ0xhYmVsIiwibmFtZVZhbCIsImVtYWlsVmFsIiwibXNnVmFsIiwidmFsdWUiLCJ0b0VxdWFsIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7OztBQUdBLE1BQU1BLEtBQUssR0FBRyx3QkFBWUMsaUJBQVosRUFBb0IsNEJBQWdCQyxtQkFBaEIsQ0FBcEIsQ0FBZDtBQUdBLE1BQU1DLEtBQUssR0FBRztBQUNiQyxFQUFBQSxJQUFJLEVBQUMsS0FEUTtBQUViQyxFQUFBQSxLQUFLLEVBQUMsdUJBRk87QUFHYkMsRUFBQUEsT0FBTyxFQUFDLHFCQUhLO0FBSWJDLEVBQUFBLElBQUksRUFBQ0MsSUFBSSxDQUFDQyxFQUFMO0FBSlEsQ0FBZDtBQVlBQyxJQUFJLENBQUMsZ0NBQUQsRUFBbUMsWUFBVTtBQUNoRCxRQUFNO0FBQUNDLElBQUFBLE1BQUQ7QUFBUUMsSUFBQUEsU0FBUjtBQUFrQkMsSUFBQUE7QUFBbEIsTUFBK0Isa0NBQU8sNkJBQUMsb0JBQUQ7QUFBVSxJQUFBLEtBQUssRUFBRWIsS0FBakI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxrQkFBd0IsNkJBQUMsYUFBRCxvQkFBVUcsS0FBVjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQXhCLENBQVAsQ0FBckM7QUFDQ1csRUFBQUEsTUFBTSxDQUFDRCxTQUFELENBQU4sQ0FBa0JFLFVBQWxCLEdBRitDLENBRWpCOztBQUM5QkQsRUFBQUEsTUFBTSxDQUFDRCxTQUFELENBQU4sQ0FBa0JHLGVBQWxCLEdBSCtDLENBR1o7O0FBQ25DRixFQUFBQSxNQUFNLENBQUNELFNBQVMsQ0FBQ0ksU0FBWCxDQUFOLENBQTRCQyxPQUE1QixDQUFvQyxPQUFwQyxFQUorQyxDQUlIO0FBRTdDLENBTkcsQ0FBSjtBQWFBUixJQUFJLENBQUMseUNBQUQsRUFBNEMsWUFBVTtBQUN6RCxRQUFNO0FBQUNDLElBQUFBLE1BQUQ7QUFBU1EsSUFBQUEsU0FBVDtBQUFtQkMsSUFBQUEsdUJBQW5CO0FBQTJDUixJQUFBQSxTQUEzQztBQUFxRFMsSUFBQUE7QUFBckQsTUFBdUUsa0NBQU8sNkJBQUMsb0JBQUQ7QUFBVSxJQUFBLEtBQUssRUFBRXJCLEtBQWpCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsa0JBQXdCLDZCQUFDLGFBQUQsb0JBQVVHLEtBQVY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxLQUF4QixDQUFQLENBQTdFO0FBRUcsTUFBSW1CLFNBQVMsR0FBR0QsY0FBYyxDQUFDLE9BQUQsQ0FBOUIsQ0FIc0QsQ0FHZjs7QUFDdkMsTUFBSUUsVUFBVSxHQUFHRixjQUFjLENBQUMsUUFBRCxDQUEvQixDQUpzRCxDQUliOztBQUN6QyxNQUFJRyxRQUFRLEdBQUdILGNBQWMsQ0FBQyxVQUFELENBQTdCLENBTHNELENBS2I7O0FBRXpDLE1BQUlJLE9BQU8sR0FBR0wsdUJBQXVCLENBQUMsU0FBRCxDQUFyQyxDQVBzRCxDQU9OOztBQUNoRCxNQUFJTSxRQUFRLEdBQUdOLHVCQUF1QixDQUFDLFVBQUQsQ0FBdEMsQ0FSc0QsQ0FRSjs7QUFDbEQsTUFBSU8sTUFBTSxHQUFHUCx1QkFBdUIsQ0FBQyxZQUFELENBQXBDLENBVHNELENBU0o7O0FBRWxETixFQUFBQSxNQUFNLENBQUNXLE9BQU8sQ0FBQ0csS0FBVCxDQUFOLENBQXNCQyxPQUF0QixDQUE4QkMsU0FBOUIsRUFYc0QsQ0FXZDs7QUFDeENoQixFQUFBQSxNQUFNLENBQUNZLFFBQVEsQ0FBQ0UsS0FBVixDQUFOLENBQXVCQyxPQUF2QixDQUErQkMsU0FBL0IsRUFac0QsQ0FZYjs7QUFDekNoQixFQUFBQSxNQUFNLENBQUNhLE1BQU0sQ0FBQ0MsS0FBUixDQUFOLENBQXFCQyxPQUFyQixDQUE2QkMsU0FBN0IsRUFic0QsQ0FhZjtBQUl2Qzs7QUFDQUwsRUFBQUEsT0FBTyxDQUFDRyxLQUFSLEdBQWdCekIsS0FBSyxDQUFDQyxJQUF0QixDQWxCc0QsQ0FrQjVCOztBQUMxQnNCLEVBQUFBLFFBQVEsQ0FBQ0UsS0FBVCxHQUFpQnpCLEtBQUssQ0FBQ0UsS0FBdkIsQ0FuQnNELENBbUIxQjs7QUFDNUJzQixFQUFBQSxNQUFNLENBQUNDLEtBQVAsR0FBZXpCLEtBQUssQ0FBQ0csT0FBckIsQ0FwQnNELENBb0IxQjtBQUU1Qjs7QUFDQVEsRUFBQUEsTUFBTSxDQUFDVyxPQUFPLENBQUNHLEtBQVQsQ0FBTixDQUFzQlYsT0FBdEIsQ0FBOEIsS0FBOUI7QUFDQUosRUFBQUEsTUFBTSxDQUFDWSxRQUFRLENBQUNFLEtBQVYsQ0FBTixDQUF1QlYsT0FBdkIsQ0FBK0IsdUJBQS9CO0FBQ0FKLEVBQUFBLE1BQU0sQ0FBQ1ksUUFBUSxDQUFDRSxLQUFWLENBQU4sQ0FBdUJWLE9BQXZCLENBQStCLHNKQUEvQjtBQUNBSixFQUFBQSxNQUFNLENBQUNhLE1BQU0sQ0FBQ0MsS0FBUixDQUFOLENBQXFCVixPQUFyQixDQUE2QixxQkFBN0I7QUFJSCxDQTlCRyxDQUFKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSdcbmltcG9ydCBDb250YWN0QnRuIGZyb20gJy4uL0NvbnRhY3QnXG5pbXBvcnQgRm9ybSBmcm9tICcuLi9Gb3JtJ1xuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCdcblxuaW1wb3J0IHtjcmVhdGVTdG9yZSxhcHBseU1pZGRsZXdhcmV9IGZyb20gJ3JlZHV4J1xuaW1wb3J0IHRodW5rIGZyb20gJ3JlZHV4LXRodW5rJ1xuaW1wb3J0IHtyZWR1Y2VyfSBmcm9tICcuLi8uLi8uLi9yZWR1eC9yZWR1Y2VycydcbmltcG9ydCB7UHJvdmlkZXJ9IGZyb20gJ3JlYWN0LXJlZHV4J1xuXG5cbmNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUocmVkdWNlcixhcHBseU1pZGRsZXdhcmUodGh1bmspKVxuXG5cbmNvbnN0IHByb3BzID0ge1xuXHRuYW1lOidHdXknLFxuXHRlbWFpbDonR3V5VGhlR3JlYXRAZ21haWwuY29tJyxcblx0bWVzc2FnZTondGhpcyBpcyB0aGUgbWVzc2FnZScsXG5cdHNlbmQ6amVzdC5mbigpXG59XG5cblxuXG5cblxuXG50ZXN0KCdGb3JtIHJlbmRlcnMgd2l0aCBvdXQgY3Jhc2hpbmcnLCBhc3luYyAoKT0+e1xuXHRjb25zdCB7c2NyZWVuLGdldEJ5VGV4dCxjb250YWluZXJ9ID0gcmVuZGVyKDxQcm92aWRlciBzdG9yZT17c3RvcmV9PjxGb3JtIHsuLi5wcm9wc30vPjwvUHJvdmlkZXI+KVxuXHRcdGV4cGVjdChjb250YWluZXIpLnRvQmVUcnV0aHkoKS8vcmVuZGVyc1xuXHRcdGV4cGVjdChjb250YWluZXIpLnRvTWF0Y2hTbmFwc2hvdCgpLy9tYXRjaGVzIHNuYXAgc2hvdCBvZiBpdHMgc2VsZihjb2RlKVxuXHRcdGV4cGVjdChjb250YWluZXIuaW5uZXJIVE1MKS50b01hdGNoKC88Zm9ybS8pLy9mb3JtIHRhZyBpcyBjb252ZXJ0ZWQgdmVyc2lvbihIVE1MNSkgYW5kIG5vdCByZWFjdFxuXG59KVx0XHRcblxuXG5cblxuXG5cbnRlc3QoJ2xhYmVzIGFuZCBpbnB1dHMgcmVuZGVyIGFuZCB0YWtlIHZhbHVlcycsIGFzeW5jICgpPT57XG5cdGNvbnN0IHtzY3JlZW4sIGZpcmVFdmVudCxnZXRBbGxCeVBsYWNlaG9sZGVyVGV4dCxnZXRCeVRleHQsZ2V0QnlMYWJlbFRleHR9ID0gcmVuZGVyKDxQcm92aWRlciBzdG9yZT17c3RvcmV9PjxGb3JtIHsuLi5wcm9wc30vPjwvUHJvdmlkZXI+KVxuXHRcdFx0XHRcblx0XHRcdFx0bGV0IG5hbWVMYWJlbCA9IGdldEJ5TGFiZWxUZXh0KCdOYW1lOicpLy9uYW1lIGxhYmVsXG5cdFx0XHRcdGxldCBlbWFpbExhYmVsID0gZ2V0QnlMYWJlbFRleHQoJ0VtYWlsOicpLy9lbWFpbCBsYWJlbFxuXHRcdFx0XHRsZXQgbXNnTGFiZWwgPSBnZXRCeUxhYmVsVGV4dCgnTWVzc2FnZTonKS8vbWVzc2FnZSBsYWJlbFxuXG5cdFx0XHRcdGxldCBuYW1lVmFsID0gZ2V0QWxsQnlQbGFjZWhvbGRlclRleHQoJ05hbWUuLi4nKS8vbmFtZSBpbnB1dFxuXHRcdFx0XHRsZXQgZW1haWxWYWwgPSBnZXRBbGxCeVBsYWNlaG9sZGVyVGV4dCgnRW1haWwuLi4nKS8vZW1haWwgaW5wdXRcblx0XHRcdFx0bGV0IG1zZ1ZhbCA9IGdldEFsbEJ5UGxhY2Vob2xkZXJUZXh0KCdNZXNzYWdlLi4uJykvL21zZyBpbnB1dFxuXG5cdFx0XHRcdGV4cGVjdChuYW1lVmFsLnZhbHVlKS50b0VxdWFsKHVuZGVmaW5lZCkvL3N0YXJ0IG91dCB3aXRoIG5vIHZhbHVlcyhlbXB0eSBpbnB1dHMpXG5cdFx0XHRcdGV4cGVjdChlbWFpbFZhbC52YWx1ZSkudG9FcXVhbCh1bmRlZmluZWQpLy9zdGFydCBvdXQgd2l0aCBubyB2YWx1ZXMoZW1wdHkgaW5wdXRzKVxuXHRcdFx0XHRleHBlY3QobXNnVmFsLnZhbHVlKS50b0VxdWFsKHVuZGVmaW5lZCkvL3N0YXJ0IG91dCB3aXRoIG5vIHZhbHVlcyhlbXB0eSBpbnB1dHMpXG5cblxuXG5cdFx0XHRcdC8vdmFsdWUgc2VudCB0byBpbnB1dHMgZnJvbSBwcm9wcyBvYmpcblx0XHRcdFx0bmFtZVZhbC52YWx1ZSA9IHByb3BzLm5hbWUvL2dpdmluZyB0aGUgdmFsdWUgb2YgXCJHdXlcIlxuXHRcdFx0XHRlbWFpbFZhbC52YWx1ZSA9IHByb3BzLmVtYWlsLy9naXZpbmcgdGhlIHZhbHVlIG9mIFwiR3V5VGhlR3JlYXRAZ21haWwuY29tXCJcblx0XHRcdFx0bXNnVmFsLnZhbHVlID0gcHJvcHMubWVzc2FnZS8vZ2l2aW5nIHRoZSB2YWx1ZSBvZiBcInRoaXMgaXMgdGhlIG1lc3NhZ2VcIlxuXG5cdFx0XHRcdC8vaW5wdXQgdmFsdWVzIGhlbGQgY2hhbmdlXG5cdFx0XHRcdGV4cGVjdChuYW1lVmFsLnZhbHVlKS50b01hdGNoKCdHdXknKVxuXHRcdFx0XHRleHBlY3QoZW1haWxWYWwudmFsdWUpLnRvTWF0Y2goJ0d1eVRoZUdyZWF0QGdtYWlsLmNvbScpXG5cdFx0XHRcdGV4cGVjdChlbWFpbFZhbC52YWx1ZSkudG9NYXRjaCgvXigoW148PigpW1xcXVxcXFwuLDs6XFxzQFwiXSsoXFwuW148PigpW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfV0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvKVxuXHRcdFx0XHRleHBlY3QobXNnVmFsLnZhbHVlKS50b01hdGNoKCd0aGlzIGlzIHRoZSBtZXNzYWdlJylcblxuXG5cbn0pXHRcdFxuXG5cbiJdfQ==