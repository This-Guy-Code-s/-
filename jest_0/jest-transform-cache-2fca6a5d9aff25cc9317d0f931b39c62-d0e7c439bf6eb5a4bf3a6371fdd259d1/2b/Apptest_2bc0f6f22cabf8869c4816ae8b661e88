086b824518ebc128d67eea8fd9848cfc
"use strict";

var _interopRequireDefault = require("/home/tgc/Desktop/newSite/-/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _App = _interopRequireDefault(require("./App"));

var _tgc = _interopRequireDefault(require("./img/tgc1.png"));

var _me = _interopRequireDefault(require("./img/me.png"));

var _wave = _interopRequireDefault(require("./img/wave.png"));

var _react2 = require("@testing-library/react");

var _redux = require("redux");

var _reduxThunk = _interopRequireDefault(require("redux-thunk"));

var _reducers = require("./redux/reducers");

var _reactRedux = require("react-redux");

var _jsxFileName = "/home/tgc/Desktop/newSite/-/src/App.test.js";
const store = (0, _redux.createStore)(_reducers.reducer, (0, _redux.applyMiddleware)(_reduxThunk.default));
beforeEach(() => {
  container = document.createElement('div');
  document.body.appendChild(container);
});
afterEach(() => {
  document.body.removeChild(container);
  container = null;
});
test('renders without crashing', async () => {
  try {
    const {
      screen,
      getByTestId,
      container
    } = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
      store: store,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 28,
        columnNumber: 48
      }
    }, /*#__PURE__*/_react.default.createElement(_App.default, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 28,
        columnNumber: 72
      }
    })));
    expect(container.innerHTML).toMatchSnapshot();
  } catch (err) {
    throw new Error(err);
  } finally {
    container.componentWillUnmount();
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFwcC50ZXN0LmpzIl0sIm5hbWVzIjpbInN0b3JlIiwicmVkdWNlciIsInRodW5rIiwiYmVmb3JlRWFjaCIsImNvbnRhaW5lciIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImFmdGVyRWFjaCIsInJlbW92ZUNoaWxkIiwidGVzdCIsInNjcmVlbiIsImdldEJ5VGVzdElkIiwiZXhwZWN0IiwiaW5uZXJIVE1MIiwidG9NYXRjaFNuYXBzaG90IiwiZXJyIiwiRXJyb3IiLCJjb21wb25lbnRXaWxsVW5tb3VudCJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOzs7QUFHQSxNQUFNQSxLQUFLLEdBQUcsd0JBQVlDLGlCQUFaLEVBQW9CLDRCQUFnQkMsbUJBQWhCLENBQXBCLENBQWQ7QUFDQUMsVUFBVSxDQUFDLE1BQU07QUFDZkMsRUFBQUEsU0FBUyxHQUFHQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBWjtBQUNBRCxFQUFBQSxRQUFRLENBQUNFLElBQVQsQ0FBY0MsV0FBZCxDQUEwQkosU0FBMUI7QUFDRCxDQUhTLENBQVY7QUFLQUssU0FBUyxDQUFDLE1BQU07QUFDZEosRUFBQUEsUUFBUSxDQUFDRSxJQUFULENBQWNHLFdBQWQsQ0FBMEJOLFNBQTFCO0FBQ0FBLEVBQUFBLFNBQVMsR0FBRyxJQUFaO0FBQ0QsQ0FIUSxDQUFUO0FBS0FPLElBQUksQ0FBQywwQkFBRCxFQUE0QixZQUFZO0FBQ3pDLE1BQUc7QUFDTCxVQUFNO0FBQUNDLE1BQUFBLE1BQUQ7QUFBUUMsTUFBQUEsV0FBUjtBQUFvQlQsTUFBQUE7QUFBcEIsUUFBaUMsa0NBQU8sNkJBQUMsb0JBQUQ7QUFBVSxNQUFBLEtBQUssRUFBRUosS0FBakI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxvQkFBd0IsNkJBQUMsWUFBRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BQXhCLENBQVAsQ0FBdkM7QUFDR2MsSUFBQUEsTUFBTSxDQUFDVixTQUFTLENBQUNXLFNBQVgsQ0FBTixDQUE0QkMsZUFBNUI7QUFDQSxHQUhELENBSUEsT0FBTUMsR0FBTixFQUFVO0FBQ1QsVUFBTSxJQUFJQyxLQUFKLENBQVVELEdBQVYsQ0FBTjtBQUNBLEdBTkQsU0FPTztBQUNOYixJQUFBQSxTQUFTLENBQUNlLG9CQUFWO0FBQ0E7QUFHSCxDQWJHLENBQUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEFwcCBmcm9tICcuL0FwcCc7XG5cbmltcG9ydCBsb2dvIGZyb20gJy4vaW1nL3RnYzEucG5nJ1xuaW1wb3J0IG1lIGZyb20gJy4vaW1nL21lLnBuZydcbmltcG9ydCB3YXZpbyBmcm9tICcuL2ltZy93YXZlLnBuZydcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCB3YWl0Rm9yLCBzY3JlZW4gfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0J1xuXG5pbXBvcnQge2NyZWF0ZVN0b3JlLGFwcGx5TWlkZGxld2FyZX0gZnJvbSAncmVkdXgnXG5pbXBvcnQgdGh1bmsgZnJvbSAncmVkdXgtdGh1bmsnXG5pbXBvcnQge3JlZHVjZXJ9IGZyb20gJy4vcmVkdXgvcmVkdWNlcnMnXG5pbXBvcnQge1Byb3ZpZGVyfSBmcm9tICdyZWFjdC1yZWR1eCdcblxuXG5jb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKHJlZHVjZXIsYXBwbHlNaWRkbGV3YXJlKHRodW5rKSlcbmJlZm9yZUVhY2goKCkgPT4ge1xuICBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xufSk7XG5cbmFmdGVyRWFjaCgoKSA9PiB7XG4gIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoY29udGFpbmVyKTtcbiAgY29udGFpbmVyID0gbnVsbDtcbn0pO1xuXG50ZXN0KCdyZW5kZXJzIHdpdGhvdXQgY3Jhc2hpbmcnLGFzeW5jICgpID0+IHtcblx0XHRcdHRyeXtcblx0Y29uc3Qge3NjcmVlbixnZXRCeVRlc3RJZCxjb250YWluZXJ9ID0gcmVuZGVyKDxQcm92aWRlciBzdG9yZT17c3RvcmV9PjxBcHAgLz48L1Byb3ZpZGVyPilcblx0XHRcdFx0ZXhwZWN0KGNvbnRhaW5lci5pbm5lckhUTUwpLnRvTWF0Y2hTbmFwc2hvdCgpXG5cdFx0XHR9XG5cdFx0XHRjYXRjaChlcnIpe1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoZXJyKVxuXHRcdFx0fVxuXHRcdFx0ZmluYWxseXtcblx0XHRcdFx0Y29udGFpbmVyLmNvbXBvbmVudFdpbGxVbm1vdW50KClcblx0XHRcdH1cblx0XHRcdFxuXG59KTtcbiJdfQ==