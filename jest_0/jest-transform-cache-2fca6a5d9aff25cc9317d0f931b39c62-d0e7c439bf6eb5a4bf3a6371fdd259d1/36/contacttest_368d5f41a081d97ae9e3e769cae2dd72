e8e3eb50b5d1fb2c53e329419ae040c2
"use strict";

var _interopRequireDefault = require("/home/tgc/Desktop/newSite/-/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _Contact = _interopRequireDefault(require("../Contact"));

var _Form = _interopRequireDefault(require("../Form"));

var _react2 = require("@testing-library/react");

var _redux = require("redux");

var _reduxThunk = _interopRequireDefault(require("redux-thunk"));

var _reducers = require("../../../redux/reducers");

var _reactRedux = require("react-redux");

var _jsxFileName = "/home/tgc/Desktop/newSite/-/src/comps/home/testing/contact.test.js";
const store = (0, _redux.createStore)(_reducers.reducer, (0, _redux.applyMiddleware)(_reduxThunk.default));
const props = {
  name: 'Guy',
  email: 'GuyTheGreat@gmail.com',
  message: 'this is the message',
  send: jest.fn()
};
test('Form renders with out crashing', async () => {
  const {
    screen,
    fireEvent,
    getAllByPlaceholderText,
    getByText,
    getByLabelText
  } = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
    store: store,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 24,
      columnNumber: 86
    }
  }, /*#__PURE__*/_react.default.createElement(_Form.default, Object.assign({}, props, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 24,
      columnNumber: 110
    }
  }))));
  let nameLabel = getByLabelText('Name:');
  let emailLabel = getByLabelText('Email:');
  let msgLabel = getByLabelText('Message:');
  let nameVal = getAllByPlaceholderText('Name...');
  let emailVal = getAllByPlaceholderText('Email...');
  let msgVal = getAllByPlaceholderText('Message...');
  expect(nameVal.value).toEqual(undefined);
  expect(emailVal.value).toEqual(undefined);
  expect(msgVal.value).toEqual(undefined);
  nameVal.value = props.name;
  emailVal.value = props.email;
  msgVal.value = props.message;
  expect(nameVal.value).toMatch('Guy');
  expect(emailVal.value).toMatch('GuyTheGreat@gmail.com');
  expect(emailVal.value).toMatch(/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/);
  expect(msgVal.value).toMatch('this is the message');
  fireEvent.click(screen.getByText(/Send/i));
  console.log(fireEvent.click(button));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRhY3QudGVzdC5qcyJdLCJuYW1lcyI6WyJzdG9yZSIsInJlZHVjZXIiLCJ0aHVuayIsInByb3BzIiwibmFtZSIsImVtYWlsIiwibWVzc2FnZSIsInNlbmQiLCJqZXN0IiwiZm4iLCJ0ZXN0Iiwic2NyZWVuIiwiZmlyZUV2ZW50IiwiZ2V0QWxsQnlQbGFjZWhvbGRlclRleHQiLCJnZXRCeVRleHQiLCJnZXRCeUxhYmVsVGV4dCIsIm5hbWVMYWJlbCIsImVtYWlsTGFiZWwiLCJtc2dMYWJlbCIsIm5hbWVWYWwiLCJlbWFpbFZhbCIsIm1zZ1ZhbCIsImV4cGVjdCIsInZhbHVlIiwidG9FcXVhbCIsInVuZGVmaW5lZCIsInRvTWF0Y2giLCJjbGljayIsImNvbnNvbGUiLCJsb2ciLCJidXR0b24iXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7O0FBR0EsTUFBTUEsS0FBSyxHQUFHLHdCQUFZQyxpQkFBWixFQUFvQiw0QkFBZ0JDLG1CQUFoQixDQUFwQixDQUFkO0FBR0EsTUFBTUMsS0FBSyxHQUFHO0FBQ2JDLEVBQUFBLElBQUksRUFBQyxLQURRO0FBRWJDLEVBQUFBLEtBQUssRUFBQyx1QkFGTztBQUdiQyxFQUFBQSxPQUFPLEVBQUMscUJBSEs7QUFJYkMsRUFBQUEsSUFBSSxFQUFDQyxJQUFJLENBQUNDLEVBQUw7QUFKUSxDQUFkO0FBT0FDLElBQUksQ0FBQyxnQ0FBRCxFQUFtQyxZQUFVO0FBQ2hELFFBQU07QUFBQ0MsSUFBQUEsTUFBRDtBQUFTQyxJQUFBQSxTQUFUO0FBQW1CQyxJQUFBQSx1QkFBbkI7QUFBMkNDLElBQUFBLFNBQTNDO0FBQXFEQyxJQUFBQTtBQUFyRCxNQUF1RSxrQ0FBTyw2QkFBQyxvQkFBRDtBQUFVLElBQUEsS0FBSyxFQUFFZixLQUFqQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGtCQUF3Qiw2QkFBQyxhQUFELG9CQUFVRyxLQUFWO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FBeEIsQ0FBUCxDQUE3RTtBQUVHLE1BQUlhLFNBQVMsR0FBR0QsY0FBYyxDQUFDLE9BQUQsQ0FBOUI7QUFDQSxNQUFJRSxVQUFVLEdBQUdGLGNBQWMsQ0FBQyxRQUFELENBQS9CO0FBQ0EsTUFBSUcsUUFBUSxHQUFHSCxjQUFjLENBQUMsVUFBRCxDQUE3QjtBQUVBLE1BQUlJLE9BQU8sR0FBR04sdUJBQXVCLENBQUMsU0FBRCxDQUFyQztBQUNBLE1BQUlPLFFBQVEsR0FBR1AsdUJBQXVCLENBQUMsVUFBRCxDQUF0QztBQUNBLE1BQUlRLE1BQU0sR0FBR1IsdUJBQXVCLENBQUMsWUFBRCxDQUFwQztBQUVBUyxFQUFBQSxNQUFNLENBQUNILE9BQU8sQ0FBQ0ksS0FBVCxDQUFOLENBQXNCQyxPQUF0QixDQUE4QkMsU0FBOUI7QUFDQUgsRUFBQUEsTUFBTSxDQUFDRixRQUFRLENBQUNHLEtBQVYsQ0FBTixDQUF1QkMsT0FBdkIsQ0FBK0JDLFNBQS9CO0FBQ0FILEVBQUFBLE1BQU0sQ0FBQ0QsTUFBTSxDQUFDRSxLQUFSLENBQU4sQ0FBcUJDLE9BQXJCLENBQTZCQyxTQUE3QjtBQUVBTixFQUFBQSxPQUFPLENBQUNJLEtBQVIsR0FBZ0JwQixLQUFLLENBQUNDLElBQXRCO0FBQ0FnQixFQUFBQSxRQUFRLENBQUNHLEtBQVQsR0FBaUJwQixLQUFLLENBQUNFLEtBQXZCO0FBQ0FnQixFQUFBQSxNQUFNLENBQUNFLEtBQVAsR0FBZXBCLEtBQUssQ0FBQ0csT0FBckI7QUFFQWdCLEVBQUFBLE1BQU0sQ0FBQ0gsT0FBTyxDQUFDSSxLQUFULENBQU4sQ0FBc0JHLE9BQXRCLENBQThCLEtBQTlCO0FBQ0FKLEVBQUFBLE1BQU0sQ0FBQ0YsUUFBUSxDQUFDRyxLQUFWLENBQU4sQ0FBdUJHLE9BQXZCLENBQStCLHVCQUEvQjtBQUNBSixFQUFBQSxNQUFNLENBQUNGLFFBQVEsQ0FBQ0csS0FBVixDQUFOLENBQXVCRyxPQUF2QixDQUErQixzSkFBL0I7QUFDQUosRUFBQUEsTUFBTSxDQUFDRCxNQUFNLENBQUNFLEtBQVIsQ0FBTixDQUFxQkcsT0FBckIsQ0FBNkIscUJBQTdCO0FBRUFkLEVBQUFBLFNBQVMsQ0FBQ2UsS0FBVixDQUFnQmhCLE1BQU0sQ0FBQ0csU0FBUCxDQUFpQixPQUFqQixDQUFoQjtBQUVBYyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWWpCLFNBQVMsQ0FBQ2UsS0FBVixDQUFnQkcsTUFBaEIsQ0FBWjtBQUVILENBNUJHLENBQUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJ1xuaW1wb3J0IENvbnRhY3RCdG4gZnJvbSAnLi4vQ29udGFjdCdcbmltcG9ydCBGb3JtIGZyb20gJy4uL0Zvcm0nXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0J1xuXG5pbXBvcnQge2NyZWF0ZVN0b3JlLGFwcGx5TWlkZGxld2FyZX0gZnJvbSAncmVkdXgnXG5pbXBvcnQgdGh1bmsgZnJvbSAncmVkdXgtdGh1bmsnXG5pbXBvcnQge3JlZHVjZXJ9IGZyb20gJy4uLy4uLy4uL3JlZHV4L3JlZHVjZXJzJ1xuaW1wb3J0IHtQcm92aWRlcn0gZnJvbSAncmVhY3QtcmVkdXgnXG5cblxuY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZShyZWR1Y2VyLGFwcGx5TWlkZGxld2FyZSh0aHVuaykpXG5cblxuY29uc3QgcHJvcHMgPSB7XG5cdG5hbWU6J0d1eScsXG5cdGVtYWlsOidHdXlUaGVHcmVhdEBnbWFpbC5jb20nLFxuXHRtZXNzYWdlOid0aGlzIGlzIHRoZSBtZXNzYWdlJyxcblx0c2VuZDpqZXN0LmZuKClcbn1cblxudGVzdCgnRm9ybSByZW5kZXJzIHdpdGggb3V0IGNyYXNoaW5nJywgYXN5bmMgKCk9Pntcblx0Y29uc3Qge3NjcmVlbiwgZmlyZUV2ZW50LGdldEFsbEJ5UGxhY2Vob2xkZXJUZXh0LGdldEJ5VGV4dCxnZXRCeUxhYmVsVGV4dH0gPSByZW5kZXIoPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+PEZvcm0gey4uLnByb3BzfS8+PC9Qcm92aWRlcj4pXG5cdFx0XHRcdFxuXHRcdFx0XHRsZXQgbmFtZUxhYmVsID0gZ2V0QnlMYWJlbFRleHQoJ05hbWU6Jylcblx0XHRcdFx0bGV0IGVtYWlsTGFiZWwgPSBnZXRCeUxhYmVsVGV4dCgnRW1haWw6Jylcblx0XHRcdFx0bGV0IG1zZ0xhYmVsID0gZ2V0QnlMYWJlbFRleHQoJ01lc3NhZ2U6JylcblxuXHRcdFx0XHRsZXQgbmFtZVZhbCA9IGdldEFsbEJ5UGxhY2Vob2xkZXJUZXh0KCdOYW1lLi4uJylcblx0XHRcdFx0bGV0IGVtYWlsVmFsID0gZ2V0QWxsQnlQbGFjZWhvbGRlclRleHQoJ0VtYWlsLi4uJylcblx0XHRcdFx0bGV0IG1zZ1ZhbCA9IGdldEFsbEJ5UGxhY2Vob2xkZXJUZXh0KCdNZXNzYWdlLi4uJylcblxuXHRcdFx0XHRleHBlY3QobmFtZVZhbC52YWx1ZSkudG9FcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRcdGV4cGVjdChlbWFpbFZhbC52YWx1ZSkudG9FcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRcdGV4cGVjdChtc2dWYWwudmFsdWUpLnRvRXF1YWwodW5kZWZpbmVkKVxuXG5cdFx0XHRcdG5hbWVWYWwudmFsdWUgPSBwcm9wcy5uYW1lXG5cdFx0XHRcdGVtYWlsVmFsLnZhbHVlID0gcHJvcHMuZW1haWxcblx0XHRcdFx0bXNnVmFsLnZhbHVlID0gcHJvcHMubWVzc2FnZVxuXG5cdFx0XHRcdGV4cGVjdChuYW1lVmFsLnZhbHVlKS50b01hdGNoKCdHdXknKVxuXHRcdFx0XHRleHBlY3QoZW1haWxWYWwudmFsdWUpLnRvTWF0Y2goJ0d1eVRoZUdyZWF0QGdtYWlsLmNvbScpXG5cdFx0XHRcdGV4cGVjdChlbWFpbFZhbC52YWx1ZSkudG9NYXRjaCgvXigoW148PigpW1xcXVxcXFwuLDs6XFxzQFwiXSsoXFwuW148PigpW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfV0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvKVxuXHRcdFx0XHRleHBlY3QobXNnVmFsLnZhbHVlKS50b01hdGNoKCd0aGlzIGlzIHRoZSBtZXNzYWdlJylcblxuXHRcdFx0XHRmaXJlRXZlbnQuY2xpY2soc2NyZWVuLmdldEJ5VGV4dCgvU2VuZC9pKSlcblxuXHRcdFx0XHRjb25zb2xlLmxvZyhmaXJlRXZlbnQuY2xpY2soYnV0dG9uKSlcblxufSlcdFx0Il19